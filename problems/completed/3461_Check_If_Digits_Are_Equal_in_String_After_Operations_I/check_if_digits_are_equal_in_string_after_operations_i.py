class Solution:
    '''
        input: 's' = string of digits
        Goal: perform the 'Operation' repeatedly untill the string ==  2 digits. 
        Operation: starting at i=0; replace each pair of digits -> sum(pair)       ( "pair" : s[i], s[i+1] )
        modulo: 10.
        output: return True if digit_1 == digit_2 else False 
    '''

    def hasSameDigits(self, s: str) -> bool:
        ''' 
        1.0) Simple approach - while loop DIRTY
        '''
        
        s = list(s)
        ans = self.halfList(s)
        print(f"\n==> finished! -> final ans: {ans}")
        print(f"if {ans[0]} == {ans[1]}: {ans[0]==ans[1]}")
        if ans[0]==ans[1]:
            return True
        return False
    
    def halfList(self, s):
        ans = []
        print(f"s:{s}")
        for a, b in zip(s, s[1:]):
            ans.append((int(a)+int(b))%10)
            print(f" append to ans -> {(int(a)+int(b))%10}")
            s.pop(0); s.pop(0)
            print(f"    ans: {ans}, s:{s}")
            if len(s)==1:
                ans.append(int(s[0])%10)
        print(f" ans: {ans} XXX")
        if len(ans)>2:
            print(f"RECALL -> s=ans={ans}, old s:{s}\n")
            ans = self.halfList(s=ans)
        return ans
    

    def hasSameDigits(self, s: str) -> bool:
        ''' 
        2.0) in-place
        '''
        s = list(s)
        n = len(s)
        i = 0
        while n>2:
            s[i] = (int(s[i]) + int(s[i+1])) % 10
            i += 1
            if i >= n - 1:
                n -= 1
                i=0
        return s[0]==s[1]
    
    # did int changes before, so it only does it once.
    def hasSameDigits(self, s: str) -> bool:
        ''' 
        2.0) in-place - less repitition
        '''
        s = [int(char) for char in s]
        n = len(s)
        i = 0
        while n>2:
            s[i] = (s[i] + s[i+1]) % 10
            i += 1
            if i >= n - 1:
                n -= 1
                i=0
        return s[0]==s[1]
        



if __name__ == '__main__':

    cases = [
    "323",
    "34789",
    # "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
    # "9876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210",
    # "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    # "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    # "3141592653314159265331415926533141592653314159265331415926533141592653314159265331415926533141592653",
    # "2718281828271828182827182818282718281828271828182827182818282718281828271828182827182818282718281828",
    ]

    #> OPTION 1 (for single inputs)
    solution = Solution()
    for i, s in enumerate(cases):
        print(f"___ NO.{i} ___________________________________")
        print(f"n={i} -> {solution.hasSameDigits(s)}\n")


'''
for submission:
cases = [
    "323",
    "3902",
    "34789",
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
    "9876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "3141592653314159265331415926533141592653314159265331415926533141592653314159265331415926533141592653",
    "2718281828271828182827182818282718281828271828182827182818282718281828271828182827182818282718281828",
]

for leetcode:
"3902"
"34789"
"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
"9876543210987654321098765432109876543210987654321098765432109876543210987654321098765432109876543210"
"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
"3141592653314159265331415926533141592653314159265331415926533141592653314159265331415926533141592653"
"2718281828271828182827182818282718281828271828182827182818282718281828271828182827182818282718281828"


'''




[1,1,1,1]
[2,2,2]