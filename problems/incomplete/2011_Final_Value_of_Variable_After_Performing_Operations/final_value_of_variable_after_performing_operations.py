class Solution:
    ''' 1.0) - double iteration, compressed dict'''
    def finalValueAfterOperations(self, operations: list[str]) -> int:
        x = 0
        ops = {
            ("++X", "X++"): +1,
            ("--X", "X--"): -1,
        }
        for i in operations:
            x += next(v for k, v in ops.items() if i in k)
        return x

    ''' 2.0) - single iteration, full dict'''
    def finalValueAfterOperations(self, operations: list[str]) -> int:
        x = 0
        ops = {
            "++X": +1,
            "X++": +1,
            "X--": -1,
            "--X": -1,
        }
        for i in operations: x += ops[i]
        return x


    ''' 3.0) - for loop with if statement, simplified ops'''
    def finalValueAfterOperations(self, operations: list[str]) -> int:
        x = 0
        ops = ("++X", "X++")
        for i in operations:
            x+=1 if i in ops else -1
        return x


    

if __name__ == '__main__':

    # cases = [
    #     ["--X","X++","X++"],
	# 	["++X","++X","X++"],
	# 	["X++","++X","--X","X--"]
    # ]
    cases = [
["--X", "X++", "X++"],
["++X", "++X", "X++"],
["X++", "++X", "--X", "X--"],





    ]


    #> OPTION 1 (for single inputs)
    s = Solution()
    for i, operations in enumerate(cases):
        print(f"___ NO.{i} ___________________________________")
        print(f"n={i} -> {s.finalValueAfterOperations(operations)}\n")


